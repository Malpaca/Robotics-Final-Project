syms a2 ac2 a3 ac3 q1 q2 q3 q4 q5 q6 dq1 dq2 dq3 m1 m2 m3 g d1 d6a = [0;a2;a3;0;0;0];alpha = [pi/2;0;pi/2;-pi/2;pi/2;0];d = [d1;0;0;0;0;d6];theta = [q1;q2;q3;q4;q5;q6];DH = [a, alpha, d, theta];A = sym(eye(4));for i = 1:3   A = A*calcAi(DH,i);endW = sym(eye(4));for i = 4:6   W = W*calcAi(DH,i);enddisp("Forward Kinematics of Arm");disp(simplify(A));disp("Forward Kinematics of Wrist");disp(simplify(W));T1 = [[cos(q1) 0 sin(q1) 0];[sin(q1) 0 -cos(q1) 0];[0 1 0 d1];[0 0 0 1]];T2 = [[cos(q2) -sin(q2) 0 a2*cos(q2)];[sin(q2) cos(q2) 0 a2*sin(q2)];[0 0 1 0];[0 0 0 1]];Tc2 = [[cos(q2) -sin(q2) 0 ac2*cos(q2)];[sin(q2) cos(q2) 0 ac2*sin(q2)];[0 0 1 0];[0 0 0 1]];T3 = [[cos(q3) 0 sin(q3) a3*cos(q3)];[sin(q3) 0 -cos(q3) a3*sin(q3)];[0 1 0 0];[0 0 0 1]];Tc3 = [[cos(q3) 0 sin(q3) ac3*cos(q3)];[sin(q3) 0 -cos(q3) ac3*sin(q3)];[0 1 0 0];[0 0 0 1]];% B = T2*T3;H1 = T1;H2 = T1*T2;Hc2 = T1*Tc2;H3 = T1*T2*T3;Hc3 = T1*T2*Tc3;% disp(B);disp("Transformations");disp(simplify(H1));disp(simplify(H2));disp(simplify(H3));zero = [0;0;0];o0 = zero;o1 = H1(1:3,4);o2 = H2(1:3,4);oc2 = Hc2(1:3,4);o3 = H3(1:3,4);oc3 = Hc3(1:3,4);z0 = [0;0;1];z1 = H1(1:3,3);z2 = H2(1:3,3);disp("origins");disp(o0);disp(o1);disp(o2);disp(o3);disp("zs");disp(z0);disp(z1);disp(z2);J1 = [[cross(z0,(o1-o0)),zero,zero];[z0,zero,zero]];J2 = [[cross(z0,(oc2-o0)),cross(z1,(oc2-o1)),zero];[z0,z1,zero]];J3 = [[cross(z0,(oc3-o0)),cross(z1,(oc3-o1)),cross(z2,(oc3-o2))];[z0,z1,z2]];disp("Jacobian for the first link com");disp(simplify(J1));disp("Jacobian for the second link com")disp(simplify(J2));disp("Jacobian for the third link com")disp(simplify(J3));I1 = diag([0,0,0]);I2 = diag([1/12*m2*a2^2,1/12*m2*a2^2,0]);I3 = diag([1/12*m3*a3^2,1/12*m3*a3^2,0]);Jv1 = J1(1:3,1:3);Jw1 = J1(4:6,1:3);Jv2 = J2(1:3,1:3);Jw2 = J2(4:6,1:3);Jv3 = J3(1:3,1:3);Jw3 = J3(4:6,1:3);R1 = H1(1:3,1:3);R2 = H2(1:3,1:3);R3 = H3(1:3,1:3);D1 = m1*transpose(Jv1)*Jv1+transpose(Jw1)*R1*I1*transpose(R1)*Jw1;D2 = m2*transpose(Jv2)*Jv2+transpose(Jw2)*R2*I2*transpose(R2)*Jw2;D3 = m3*transpose(Jv3)*Jv3+transpose(Jw3)*R3*I3*transpose(R3)*Jw3;D = simplify(D1+D2+D3);disp("The D matrix");disp(D);C = sym(zeros(3));dq = [dq1;dq2;dq3];q = [q1,q2,q3];for i = 1:3    for j = 1:3        for k = 1:3            C(j,k) = C(j,k)+(diff(D(k,j),q(i))+diff(D(k,i),q(j))-diff(D(i,j),q(k)))*dq(i)/2;        end    endendC = simplify(C);disp("The C matrix");disp(C);% g = 9.8;P = m1*g*o1(2)+m2*g*oc2(2)+m3*g*oc3(2);phi1 = simplify(diff(P,q(1)));phi2 = simplify(diff(P,q(2)));phi3 = simplify(diff(P,q(3)));phi = [phi1;phi2;phi3];disp("Potential");disp(P);disp("The phi vector");disp(phi);function Ai = calcAi(DH_table,ii)% CALCAI(DH_table,i) Given a DH table and index i, create matrix Ai% Inputs:%     DH_table: nX4 matrix with the parameters of each link as following:%     [a , alpha , d , theta]%     i: link index% Outputs:%     Ai: 4x4 transformation matrix (as explained in class)   ai=DH_table(ii,1);        % DH_table(ii,1)=a(ii)   alphai=DH_table(ii,2); % DH_table(ii,2)=alpha(ii) [rad]   di=DH_table(ii,3);        % DH_table(ii,3)=alpha(ii)   ti=DH_table(ii,4); % DH_table(ii,4)=theta[ii]  [rad]     cai=cos(alphai);   sai=sin(alphai);   cti=cos(ti);    sti=sin(ti);   Ai=[cti,-sti*cai,sti*sai,ai*cti;       sti,cti*cai,-cti*sai,ai*sti;       0,sai,cai,di;       0,0,0,1];end